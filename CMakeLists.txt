cmake_minimum_required(VERSION 3.16)

macro(configure_msvc_runtime)
  if(MSVC)
    if("${MSVC_RUNTIME}" STREQUAL "")
      set(MSVC_RUNTIME "static")
    endif()
    set(variables
      CMAKE_C_FLAGS_DEBUG
      CMAKE_C_FLAGS_MINSIZEREL
      CMAKE_C_FLAGS_RELEASE
      CMAKE_C_FLAGS_RELWITHDEBINFO
      CMAKE_CXX_FLAGS_DEBUG
      CMAKE_CXX_FLAGS_MINSIZEREL
      CMAKE_CXX_FLAGS_RELEASE
      CMAKE_CXX_FLAGS_RELWITHDEBINFO
    )
    if(${MSVC_RUNTIME} STREQUAL "static")
      foreach(variable ${variables})
        if(${variable} MATCHES "/MD")
          string(REGEX REPLACE "/MD" "/MT" ${variable} "${${variable}}")
        endif()
      endforeach()
    else()
      foreach(variable ${variables})
        if(${variable} MATCHES "/MT")
          string(REGEX REPLACE "/MT" "/MD" ${variable} "${${variable}}")
        endif()
      endforeach()
    endif()
  endif()
endmacro()

project(NetTools)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")

add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")
add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")

set(INCLUDE_DIR
  ${CMAKE_SOURCE_DIR}/src/
  ${CMAKE_SOURCE_DIR}/external/gflags/include/
  ${CMAKE_SOURCE_DIR}/external/glog/include/
  ${CMAKE_SOURCE_DIR}/external/npcap/include/
  ${CMAKE_SOURCE_DIR}/external/fmt/include/
  ${CMAKE_SOURCE_DIR}/external/json/include/
  ${CMAKE_SOURCE_DIR}/external/magic_enum/include/
  ${CMAKE_SOURCE_DIR}/external/wxWidgets/include/
  ${CMAKE_SOURCE_DIR}/external/wxWidgets/include/msvc/
  ${CMAKE_SOURCE_DIR}/external/boost/include/boost-1_74/
  ${CMAKE_SOURCE_DIR}/external/webview2/include/
  ${CMAKE_SOURCE_DIR}/external/wil/include/
  )
message(STATUS "Include dir -> " ${INCLUDE_DIR})
include_directories(${INCLUDE_DIR})

set(LINK_DIR
  ${CMAKE_SOURCE_DIR}/external/gflags/lib/
  ${CMAKE_SOURCE_DIR}/external/glog/lib/
  ${CMAKE_SOURCE_DIR}/external/npcap/lib/
  ${CMAKE_SOURCE_DIR}/external/fmt/lib/
  ${CMAKE_SOURCE_DIR}/external/wxWidgets/lib/vc_x64_lib/
  ${CMAKE_SOURCE_DIR}/external/boost/lib/
  ${CMAKE_SOURCE_DIR}/external/webview2/lib/
  )
message(STATUS "Link dir -> " ${LINK_DIR})
link_directories(${LINK_DIR})

add_custom_target(sync ALL
  COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${CMAKE_SOURCE_DIR}/external/npcap/bin/npcap-1.10.exe
  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE}
  )

add_library(common INTERFACE)
target_link_libraries(common INTERFACE
  ws2_32.lib
  fmt.lib
  gflags_static.lib
  glog.lib
  shlwapi.lib
  )

add_library(net STATIC
  ${CMAKE_SOURCE_DIR}/src/net/type.cpp
  ${CMAKE_SOURCE_DIR}/src/net/protocol.cpp
  ${CMAKE_SOURCE_DIR}/src/net/ethernet.cpp
  ${CMAKE_SOURCE_DIR}/src/net/arp.cpp
  ${CMAKE_SOURCE_DIR}/src/net/ipv4.cpp
  ${CMAKE_SOURCE_DIR}/src/net/icmp.cpp
  ${CMAKE_SOURCE_DIR}/src/net/udp.cpp
  ${CMAKE_SOURCE_DIR}/src/net/tcp.cpp
  ${CMAKE_SOURCE_DIR}/src/net/dns.cpp
  ${CMAKE_SOURCE_DIR}/src/net/packet.cpp
  ${CMAKE_SOURCE_DIR}/src/net/filter.cpp
  ${CMAKE_SOURCE_DIR}/src/net/transport.cpp
  )
target_precompile_headers(net PUBLIC ${CMAKE_SOURCE_DIR}/src/prec.h)
target_link_libraries(net
  common
  wpcap.lib
  iphlpapi.lib
  )

add_executable(lsdev ${CMAKE_SOURCE_DIR}/src/cli/lsdev.cpp)
target_link_libraries(lsdev net)

add_executable(sniff WIN32
  ${CMAKE_SOURCE_DIR}/src/cli/sniff/packet-listctrl.cpp
  ${CMAKE_SOURCE_DIR}/src/cli/sniff/packet-propgrid.cpp
  ${CMAKE_SOURCE_DIR}/src/cli/sniff/ui.cpp
  ${CMAKE_SOURCE_DIR}/src/cli/sniff/main-frame.cpp
  ${CMAKE_SOURCE_DIR}/src/cli/sniff/app.cpp
  )
target_link_libraries(sniff net)

add_executable(arp ${CMAKE_SOURCE_DIR}/src/cli/arp.cpp)
target_link_libraries(arp net)

add_executable(ping ${CMAKE_SOURCE_DIR}/src/cli/ping.cpp)
target_link_libraries(ping net)

add_executable(mtu ${CMAKE_SOURCE_DIR}/src/cli/mtu.cpp)
target_link_libraries(mtu net)

add_executable(traceroute ${CMAKE_SOURCE_DIR}/src/cli/traceroute.cpp)
target_link_libraries(traceroute net)

add_executable(dns ${CMAKE_SOURCE_DIR}/src/cli/dns.cpp)
target_link_libraries(dns net)

add_executable(crawl
  ${CMAKE_SOURCE_DIR}/src/cli/crawl/browser.cpp
  ${CMAKE_SOURCE_DIR}/src/cli/crawl/main.cpp
  )
target_link_libraries(crawl
  common
  Version.lib
  WebView2Guid.lib
  WebView2LoaderStatic.lib
  )
add_custom_command(TARGET crawl POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${CMAKE_SOURCE_DIR}/external/webview2/bin/MicrosoftEdgeWebview2Setup.exe
  $<TARGET_FILE_DIR:crawl>
  )

add_executable(test ${CMAKE_SOURCE_DIR}/src/cli/test.cpp)
target_link_libraries(test common)
